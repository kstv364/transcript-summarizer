name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  AWS_REGION: us-east-1
  DO_REGION: nyc3

jobs:
  test:
    runs-on: ubuntu-latest
    
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      chromadb:
        image: chromadb/chroma:latest
        ports:
          - 8000:8000
        options: >-
          --health-cmd "curl -f http://localhost:8000/api/v1/heartbeat"
          --health-interval 30s
          --health-timeout 10s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Cache uv dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/uv
        key: ${{ runner.os }}-uv-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-uv-

    - name: Install dependencies
      run: |
        uv pip install -e ".[dev]"

    - name: Lint with flake8
      run: |
        flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Type check with mypy
      run: |
        mypy src/transcript_summarizer --ignore-missing-imports

    - name: Format check with black
      run: |
        black --check src/ tests/

    - name: Run tests
      env:
        REDIS_URL: redis://localhost:6379/0
        CHROMA_HOST: localhost
        CHROMA_PORT: 8000
        TESTING: true
      run: |
        pytest tests/ -v --cov=transcript_summarizer --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true

  security:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        curl -LsSf https://astral.sh/uv/install.sh | sh
        source $HOME/.cargo/env
        uv pip install safety bandit

    - name: Security check with safety
      run: |
        safety check

    - name: Security check with bandit
      run: |
        bandit -r src/ -f json -o bandit-report.json
        bandit -r src/

  build:
    needs: [test, security]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    outputs:
      api-image: ${{ steps.meta-api.outputs.tags }}
      worker-image: ${{ steps.meta-worker.outputs.tags }}
      frontend-image: ${{ steps.meta-frontend.outputs.tags }}
      
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for API
      id: meta-api
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-api
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Extract metadata for Worker
      id: meta-worker
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-worker
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Extract metadata for Frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend
        tags: |
          type=ref,event=branch
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and push API image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile
        push: true
        tags: ${{ steps.meta-api.outputs.tags }}
        labels: ${{ steps.meta-api.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push Worker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.worker
        push: true
        tags: ${{ steps.meta-worker.outputs.tags }}
        labels: ${{ steps.meta-worker.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push Frontend image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.frontend
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-aws:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && github.repository_variables.DEPLOY_PLATFORM == 'aws'
    environment: production-aws
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Update kubeconfig for EKS
      run: |
        aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name ${{ github.repository_variables.EKS_CLUSTER_NAME }}

    - name: Update image tags in manifests
      run: |
        # Update API image
        sed -i 's|ghcr.io/kstv364/transcript-summarizer-api:latest|${{ needs.build.outputs.api-image }}|g' k8s/api.yaml
        
        # Update Worker image  
        sed -i 's|ghcr.io/kstv364/transcript-summarizer-worker:latest|${{ needs.build.outputs.worker-image }}|g' k8s/worker.yaml
        
        # Update Frontend image
        sed -i 's|ghcr.io/kstv364/transcript-summarizer-frontend:latest|${{ needs.build.outputs.frontend-image }}|g' k8s/frontend.yaml

    - name: Deploy to EKS
      run: |
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/configmap.yaml
        kubectl apply -f k8s/redis.yaml
        kubectl apply -f k8s/chromadb.yaml
        kubectl apply -f k8s/ollama.yaml
        kubectl apply -f k8s/api.yaml
        kubectl apply -f k8s/worker.yaml
        kubectl apply -f k8s/frontend.yaml
        kubectl apply -f k8s/ingress.yaml

    - name: Wait for deployment
      run: |
        kubectl rollout status deployment/api -n transcript-summarizer --timeout=300s
        kubectl rollout status deployment/worker -n transcript-summarizer --timeout=300s
        kubectl rollout status deployment/frontend -n transcript-summarizer --timeout=300s

    - name: Verify deployment
      run: |
        kubectl get pods -n transcript-summarizer
        kubectl get services -n transcript-summarizer
        kubectl get ingress -n transcript-summarizer

  deploy-do:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main' && github.repository_variables.DEPLOY_PLATFORM == 'digitalocean'
    environment: production-do
    
    steps:
    - name: Checkout
      uses: actions/checkout@v4

    - name: Install doctl
      uses: digitalocean/action-doctl@v2
      with:
        token: ${{ secrets.DIGITALOCEAN_ACCESS_TOKEN }}

    - name: Install kubectl
      uses: azure/setup-kubectl@v3
      with:
        version: 'v1.28.0'

    - name: Save DigitalOcean kubeconfig
      run: |
        doctl kubernetes cluster kubeconfig save --expiry-seconds 600 ${{ github.repository_variables.DO_CLUSTER_NAME }}

    - name: Update image tags in manifests
      run: |
        # Update API image
        sed -i 's|ghcr.io/kstv364/transcript-summarizer-api:latest|${{ needs.build.outputs.api-image }}|g' k8s/api.yaml
        
        # Update Worker image  
        sed -i 's|ghcr.io/kstv364/transcript-summarizer-worker:latest|${{ needs.build.outputs.worker-image }}|g' k8s/worker.yaml
        
        # Update Frontend image
        sed -i 's|ghcr.io/kstv364/transcript-summarizer-frontend:latest|${{ needs.build.outputs.frontend-image }}|g' k8s/frontend.yaml

    - name: Deploy to DOKS
      run: |
        kubectl apply -f k8s/namespace.yaml
        kubectl apply -f k8s/configmap.yaml
        kubectl apply -f k8s/redis.yaml
        kubectl apply -f k8s/chromadb.yaml
        kubectl apply -f k8s/ollama.yaml
        kubectl apply -f k8s/api.yaml
        kubectl apply -f k8s/worker.yaml
        kubectl apply -f k8s/frontend.yaml
        kubectl apply -f k8s/ingress.yaml

    - name: Wait for deployment
      run: |
        kubectl rollout status deployment/api -n transcript-summarizer --timeout=300s
        kubectl rollout status deployment/worker -n transcript-summarizer --timeout=300s
        kubectl rollout status deployment/frontend -n transcript-summarizer --timeout=300s

    - name: Verify deployment
      run: |
        kubectl get pods -n transcript-summarizer
        kubectl get services -n transcript-summarizer
        kubectl get ingress -n transcript-summarizer

  notify:
    needs: [deploy-aws, deploy-do]
    runs-on: ubuntu-latest
    if: always() && (needs.deploy-aws.result != 'skipped' || needs.deploy-do.result != 'skipped')
    
    steps:
    - name: Deployment Status
      run: |
        if [[ "${{ needs.deploy-aws.result }}" == "success" ]]; then
          echo "✅ Successfully deployed to AWS EKS"
        elif [[ "${{ needs.deploy-do.result }}" == "success" ]]; then
          echo "✅ Successfully deployed to DigitalOcean DOKS"
        else
          echo "❌ Deployment failed"
          exit 1
        fi
